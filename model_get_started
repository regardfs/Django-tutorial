#Models get started

1. first you shoule import module from django.db
### http://stackoverflow.com/questions/30449960/django-save-vs-update-to-update-the-database
### you could update and def save func in a model

from django.db import models

class CustomManager(models.Manager):
    def get_queryset(self):
        super_query = super(models.Manager, self).get_queryset()
        print('Manager is called', super_query)
        return super_query


class Parkson(models.Model):
    name = models.CharField(max_length=20)
    phone_number = models.CharField(max_length=15)
    address = models.CharField(max_length=50, blank=True)

    def __str__(self):  # old version: __unicode__, latest version __str__
        return self.name


class Food(models.Model):
    name = models.CharField(max_length=20)
    price = models.DecimalField(max_digits=3,decimal_places=0)
    numbers = models.DecimalField(max_digits=2,decimal_places=0)
    favourite = models.BooleanField()
    restaurant = models.ForeignKey(Parkson)

    pungency_degree_choices = (
        ('不辣', '不辣'),
        ('微辣', '微辣'),
        ('中辣', '中辣'),
        ('非常辣', ' 非常辣'),
    )

    pungency_degree = odels.CharField(
        max_length=20,
        choices=pungency_degree_choices,
        default='不辣',
    )

    def __str__(self):
        return self.name

    class Meta:
        ordering = [-'price']

2. After defining your model, you should check！
python manage.py check

3. Make Migrations:
python manage.py makemigrations Parkson

>>> Migrations for 'Parkson':
  Parkson/migrations/0001_initial.py:
    - Create model Food
    - Create model Parkson
    - Add field restaurant to food

4. migrate
python manage.py migrate Parkson

5. data handle
>>> python manage.py shell
from Parkson.models import Parkson, Food

# create object: use ``objects.create`` method
kfc1 = Parkson(name='KFC1', phone_number='010-11110001', address='1号')
pizzhut1 = Parkson(name='PizzHut1', phone_number='010-11110002', address='2号')
kfc2 = Parkson(name='KFC2', phone_number='010-11110003', address='3号')

# save created object

[i.save() for i in [kfc1, pizzhut1, kfc2]]

# get all data
pks = Parkson.objects.all() # <QuerySet [<Parkson: KFC1>, <Parkson: PizzHut1>]>

# delete data
pks.delete()

# get attribute in certain object instance
pks # <QuerySet [<Parkson: KFC1>, <Parkson: PizzHut1>, <Parkson: KFC2>]>
pks[0]  # <Parkson: KFC1>
pks[0].name # 'KFC1'
pks[0].phone_number #'010-11110001

# queryset: we could use get/filter to acquire data, and enforcement with try/exception
# Attention: do not return a queryset, return an object instance
p1 = Parkson.objects.get(name="KFC1")
p   # <Parkson: KFC1>

p = Parkson.objects.filter(name="KFC1")
p   # <QuerySet [<Parkson: KFC1>]>

# multi filter return a queryset
p = Parkson.objects.filter(name="KFC1", phone_number='010-11110001')
p   # <QuerySet [<Parkson: KFC1>]>

# contain/patterns filter return a queryset
p = Parkson.objects.filter(name__contains='KFC')
p   # <QuerySet [<Parkson: KFC1>, <Parkson: KFC2>]>

# sequence filter
# first get Parkson restaurant name
p1 = Parkson.objects.get(name="KFC1")
f1 = Food(name="板烧鸡腿堡", price=14, numbers=1, favourite=True, restaurant=p1)
f2 = Food(name="小薯条", price=7, numbers=1, favourite=True, restaurant=p1)
f3 = Food(name="中薯条", price=12, numbers=1, favourite=True, restaurant=p1)
f4 = Food(name="大薯条", price=15, numbers=1, favourite=True, restaurant=p1)
[i.save() for i in [f1,f2,f3,f4]]

# sort by price:
Food.objects.order_by('price')
### <QuerySet [<Food: 小薯条>, <Food: 中薯条>, <Food: 板烧鸡腿堡>, <Food: 大薯条>]>

# sort by price then name:
Food.objects.order_by('price','name')
### <QuerySet [<Food: 小薯条>, <Food: 中薯条>, <Food: 板烧鸡腿堡>, <Food: 大薯条>]>

# reverse sorted by price
Food.objects.order_by('-price')

# set default rank and sort by certain field

# joint sort, which only return one specify data not queryset
Food.objects.order_by('price').filter(price=12).get(name__contains='薯条')    # <Food: 中薯条>

# select Foreign key
food = Food.objects.order_by('price').filter(price=12).get(name__contains='薯条')
food.restaurant

# 小写模型名称_set could get a relationship management for Foreign key
r.food_set
### <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7faece099e48>
r.food_set.all()
### <QuerySet [<Food: 板烧鸡腿堡>, <Food: 小薯条>, <Food: 中薯条>, <Food: 大薯条>]>

# other relationship of Many to Many, for instance:
from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=30)

    def __unicode__(self):
        return self.name

class Book(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)

book = Book.objects.get(id=1)
book.authors.all()
### [<Author: 金庸>, <Author: 古龍>]

author = Author.objects.get(id=1)
a.book_set.all()
### [<Book: 便秘的魔法石>, <Book: 考盃的考驗>]

# update
1. use get method
food = Food.objects.get(price=12)
food.price=13
food.save()

2. use queryset update method
Food.objects.filter(name="中薯条").update(price=12)
Parkson.objects.get(name="KFC1").food_set.update(price=50)

# delete
food = Food.objects.get(name="板烧鸡腿堡")
food.delete()
foods = Food.objects.all()
foods.delete()